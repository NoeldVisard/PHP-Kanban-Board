{% extends 'base.html.twig' %}

{% block title %}Hello BoardController!{% endblock %}

{% block body %}
<div class="container">
    <div class="kanban-heading">
        <strong class="kanban-heading-text">Kanban Board</strong>
    </div>
    <div class="kanban-board">
        {% for board in boards %}
            <div class="kanban-block {{ board.name }}" id="{{ board.name }}" ondrop="drop(event)" ondragover="allowDrop(event)">
                <strong>{{ board.name }}</strong>
                {% if loop.first %}
                    <div class="task-button-block">
                        <button id="task-button" onclick="createTask()">Create new task</button>
                    </div>
                {% endif %}
                {% if tasks[loop.index] is defined %}
                    {% for task in tasks[loop.index] %}
                        <div class="task" id="task-{{ task.id }}" draggable="true" ondragstart="drag(event)" onclick="remove({{ task.id }}, '{{ task.name }}')">
                            <span>{{ task.name }}</span>
                        </div>
                    {% endfor %}
                {% endif %}
            </div>
        {% endfor %}
        <div class="create-new-task-block" id="create-new-task-block">
            <strong>New Task</strong>
            <span class="form-row">
                <label class="form-row-label" for="task-name">Task</label>
                <input class="form-row-input" type="text" name="task-name" id="task-name">
            </span>
            <span class="form-row">
                <label class="form-row-label" for="task-name">Description</label>
                <textarea class="form-row-input" name="task-description" id="task-description" cols="70" rows="10"></textarea>
            </span>
            <span class="form-row">
                <label class="form-row-label" for="task-name">Urgency</label>
                <select class="form-row-input" name="task-urgency" id="task-urgency">
                    <option value="low">Low</option>
                    <option value="Medium">Medium</option>
                    <option value="High">High</option>
                </select>
            </span>
            <span class="form-row">
                <label class="form-row-label" for="task-deadline">Deadline:</label>
{#                TODO: Make min data from current data #}
                <input class="form-row-input" type="date" id="task-deadline" name="task-deadline" min="2022-12-07" max="2050-01-01">
            </span>
            <span class="form-row-buttons">
                <button id="edit-button" onclick="editTask()">Edit</button>
                <button id="save-button" onclick="saveTask()">Save</button>
                <button id="cancel-button" onclick="createTask()">Cancel</button>
            </span>
        </div>
    </div>
</div>
<script>
    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drop(ev) {
        ev.preventDefault();
        var data = ev.dataTransfer.getData("text");
        ev.currentTarget.appendChild(document.getElementById(data));
    }

    function createTask(){
        var x = document.getElementById("In process");
        var y = document.getElementById("Completed");
        var z = document.getElementById("create-new-task-block");
        if (x.style.display === "none") {
            x.style.display = "block";
            y.style.display = "block";
            z.style.display = "none";
        } else {
            x.style.display = "none";
            y.style.display = "none";
            z.style.display = "flex";
        }
    }

    function saveTask(){
        const taskName = document.getElementById("task-name").value;
        const taskDescription = document.getElementById("task-description").value;
        const taskUrgency = document.getElementById("task-urgency").value;
        const taskDeadline = document.getElementById("task-deadline").value;

        const xhr = new XMLHttpRequest();
        xhr.withCredentials = true;
        xhr.open("POST", "http://127.0.0.1:8000/task/add", true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        xhr.send(JSON.stringify({
            taskName: taskName,
            taskDescription: taskDescription,
            taskUrgency: taskUrgency,
            taskDeadline: taskDeadline
        }));
        xhr.onload = () => {
            document.getElementById("task-name").value = '';
            document.getElementById("task-description").value = '';
            document.getElementById("task-urgency").value = 'low';
            document.getElementById("task-deadline").value = '';

            const newTask = JSON.parse(xhr.response);

            const todo = document.getElementById("Unassigned");
            todo.innerHTML += `
                <div class="task" id="task-${newTask.id}" draggable="true" ondragstart="drag(event)" onclick="remove(${newTask.id}, '${newTask.name}')">
                    <span>${newTask.name}</span>
                </div>
                `
            createTask();
        }

    }

    function remove(taskId, taskName) {
        const xhr = new XMLHttpRequest();
        xhr.withCredentials = true;
        xhr.open("POST", "http://127.0.0.1:8000/task/delete", true);
        xhr.setRequestHeader('Content-Type', 'application/json; charset=utf-8');
        xhr.send(JSON.stringify({
            taskId: taskId,
        }));
        xhr.onload = () => {
            const taskElem = document.getElementById(`task-${taskId}`);
            console.log(taskElem.innerText)
            taskElem.parentNode.removeChild(taskElem)
        }
    }
</script>
<style>
    .container {
        width: 70%;
        min-width: 50%;
        margin: auto;
        display: flex;
        flex-direction: column;
    }

    .kanban-heading {
        display: flex;
        flex-direction: row;
        justify-content: center;
        font-family: sans-serif;
    }

    .kanban-heading-text {
        font-size: 1.8rem;
        background-color: tomato;
        padding: 0.8rem 1.7rem;
        border-radius: 0.5rem;
        margin: 1rem;
    }

    .kanban-board {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        font-family: sans-serif;
    }

    .kanban-block {
        padding: 0.6rem;
        width: 30.5%;
        min-width: 14rem;
        min-height: 4.5rem;
        border-radius: 0.3rem;
    }

    .Unassigned {
        background-color: #fec6d1;
    }

    .In {
        background-color: #ffaf00;
    }

    .Completed {
        background-color: #018b01;
    }

    body {
        background-color: black;
    }

    .task {
        background-color: white;
        margin: 0.2rem 0rem 0.3rem 0rem;
        border: 0.1rem solid black;
        border-radius: 0.2rem;
        padding: 0.5rem 0.2rem 0.5rem 2rem;
    }

    #task-button {
        margin: 0.2rem 0rem 0.1rem 0rem;
        background-color: white;
        border-radius: 0.2rem;
        width: 100%;
        border: 0.25rem solid black;
        padding: 0.5rem 2.7rem;
        border-radius: 0.3rem;
        font-size: 1rem;
    }

    .kanban-block,
    .create-new-task-block {
        padding: 0.6rem;
        width: 30.5%;
        min-width: 14rem;
        min-height: 4.5rem;
        border-radius: 0.3rem;
    }

    .create-new-task-block {
        display: none;
        /* display: flex; */
        background: #ffaf00;
        width: 64.4%;
        flex-direction: column;
    }

    .form-row {
        display: flex;
        flex-direction: row;
        margin: 0.2rem;
    }

    .form-row-label {
        width: 15%;
        padding: 0.2rem;
        padding-right: 0.5rem;
        border: 0.1rem solid black;
        border-right: 0;
        border-radius: 0.2rem 0rem 0rem 0.2rem;
    }

    .form-row-input {
        border: 0.1rem solid black;
        border-radius: 0rem 0.2rem 0.2rem 0rem;
        width: 85%;
    }

    textarea {
        resize: none;
    }

    .form-row-buttons {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
        margin: 0.2rem;
    }

    #edit-button,
    #save-button,
    #cancel-button {
        margin: 0.2rem 0rem 0.1rem 0rem;
        background-color: white;
        border-radius: 0.2rem;
        width: 49.2%;
        border: 0.25rem solid black;
        padding: 0.5rem 2.7rem;
        border-radius: 0.3rem;
        font-size: 1rem;
    }

    #edit-button {
        display: none;
    }

</style>
{% endblock %}
